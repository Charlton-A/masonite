from typing import TYPE_CHECKING, Any, Tuple, List

if TYPE_CHECKING:
    from ..routes import Route

class Auth:
    """Authentication facade."""

    def add_guard(name: str, guard: "Any"):
        """Register a new authentication guard."""
        ...
    def set_configuration(config: dict): ...
    def guard(guard: "Any") -> "Auth":
        """Set the current authentication guard to use."""
        ...
    def get_guard(name: str = None) -> "Any":
        """Get the default authentication guard or the guard with given name."""
        ...
    def get_config_options(guard: str = None) -> dict: ...
    def attempt(email: str, password: str, once: bool = False) -> "Any": ...
        """Attempt to authenticate the user with the given email/password."""
    def attempt_by_id(user_id: "str|int", once: bool = False) -> "Any": ...
        """Attempt to authenticate the user with the given user ID."""
    def logout(self) -> None:
        """Logout the current authenticated user."""
        ...
    def user(self) -> "Any|bool":
        """Get the current authenticated user."""
        ...
    def register(dictionary: dict) -> "Any":
        """Register a new user with given data."""
        ...
    def set_user(self, user:"Any") -> "Auth":
        """Set the current authenticated user."""
        ...
    def password_reset(email: str) -> "Tuple[None, None]|Tuple[int,str]":
        """Reset password of the user with the given email."""
        ...
    def reset_password(password: str, token: str) -> bool:
        """Reset password of the user with the given authentication token."""
        ...
    @classmethod
    def routes(self) -> "List[Route]":
        """Get the basic authentication routes."""
        ...
