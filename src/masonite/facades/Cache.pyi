from typing import Any, Callable

class Cache:
    """Cache Facade."""

    def add_driver(name: str, driver: Any) -> None: ...
    def set_configuration(config: dict) -> "Cache": ...
    def get_driver(name: str = None) -> Any: ...
    def get_config_options(name: str = None) -> dict: ...
    def store(name: str = "default") -> Any:
        """Select cache driver by name or use the default cache driver if no name is provided."""
        ...
    def add(
        key: str, value: Any, seconds: int = None, store: str = None, **kwargs
    ) -> Any:
        """Add data to cache store. This will either fetch the data already in the cache,
        if it is not expired, or it will insert the new value."""
        ...
    def get(key: str, default: Any = None, store: str = None, **kwargs) -> Any:
        """Get cache data from cache store. If data is expired it will return None or the default
        value if specified."""
        ...
    def put(
        key: str, value: Any, seconds: int = None, store: str = None, **kwargs
    ) -> Any:
        """Add data to cache store, regardless of if it exists already."""
        ...
    def has(key: str, store: str = None, **kwargs) -> bool:
        """Check that data exists in cache store and is not expired."""
        ...
    def forget(key: str, store: str = None, **kwargs) -> Any:
        """Remove data from cache store."""
        ...
    def increment(key: str, amount: int = 1, store: str = None, **kwargs) -> Any:
        """Increment an integer data value in cache store."""
        ...
    def decrement(key: str, amount: int = 1, store: str = None, **kwargs) -> Any:
        """Decrement an integer data value in cache store."""
        ...
    def flush(store: str = None, **kwargs) -> Any:
        """Delete all data in cache store."""
        ...
    def remember(key: str, callable: "Callable", store: str = None, **kwargs) -> Any:
        """Add data to cache store by using a callable."""
        ...
